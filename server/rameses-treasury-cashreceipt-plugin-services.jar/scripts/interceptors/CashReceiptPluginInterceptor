import com.rameses.annotations.*;

class CashReceiptPluginInterceptor {
	
	@Service(dynamic=true)
	def svc;

	@DataContext("cashreceipt_plugin")
	def pluginEm;

	@After(pattern="CashReceiptService.post", eval="#{args[0]?.collectiontype?.handler != null}", index=10000 )
	public void onPostPayment(def evt) {
		def a = evt.args[0];
		def handler = a.collectiontype.handler;
		def p = pluginEm.find( [objid: handler] ).first();
		if( p ) {
			def conn = p.connection;
			def serviceName = p.servicename;
			if(!conn) {
				conn = p.objid;
			}
			if(!serviceName) {
				serviceName = "PaymentService";
			}
			def t = svc.lookup(serviceName, conn );
			if(!t) throw new Exception(serviceName + " not found for "+handler +" @connection "+conn);
			a.reftype = "cashreceipt";
			t.postPayment( a );
		}
	}

	@After(pattern="CashReceiptVoidService.post", eval="#{result?.receipt?.collectiontype?.handler != null}", index=10000 )
	public void onVoidPayment(def evt) {
		def a = evt.result;
		def handler = a.receipt.collectiontype.handler;
		def p = pluginEm.find( [objid: handler] ).first();
		if( p ) {
			def conn = p.connection;
			def serviceName = p.servicename;
			if(!conn) {
				conn = p.objid;
			}
			if(!serviceName) {
				serviceName = "PaymentService";
			}
			def t = svc.lookup(serviceName, conn );
			if(!t) throw new Exception(serviceName + " not found for "+handler +" @connection "+conn);
			t.voidPayment( a );
		}
	}
}

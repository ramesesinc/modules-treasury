import com.rameses.annotations.*;

class DepositVoucherRCDReportService {

	@DataContext('depositvoucher')
	def dv_em; 
		
	@DataContext('sys_user')
	def user_em; 
		
	@ActiveDB('depositvoucher_rcd_report') 
	def rcd_em; 

	@Service('NumberService')
	def numSvc; 

	@Service('Var') 
	def var; 	

	@ProxyMethod 
	def initReport( param) { 
		def resp = [ funds: rcd_em.getFunds( param ) ]; 
		resp.funds.each{ it.fundname = it.title } 
		return resp; 
	} 

	@ProxyMethod 
	def getRCDByFund( param ) { 
		if ( !param.depositvoucherid ) throw new Exception("depositvoucherid parameter is required"); 
		if ( !param.fund?.objid ) throw new Exception("fund.objid parameter is required"); 

		def result = [:]; 		
		def dvinfo = dv_em.find([ objid: param.depositvoucherid ]).first(); 
		if ( !dvinfo ) return result; 

		result.putAll( dvinfo ); 

		def p = [ depositvoucherid: dvinfo.objid, fundid: param.fund.objid ]; 
		def dvfinfo = rcd_em.findDepositVoucherFund( p ); 
		result.putAll( dvfinfo ); 

		result.amountinwords = numSvc.doubleToWords( result.amount ).toUpperCase() + " PESOS ONLY"; 
		result.liquidations = rcd_em.getLiquidations( p ); 
		result.remittances = rcd_em.getRemittances( p ); 
		result.afnonserials = [[:]]; 
		result.afserials = [[:]]; 
		result.cashier = result.createdby;

		def userinfo = user_em.find([ objid: result.cashier.objid ]).select('objid,jobtitle').first(); 
		result.cashier.title = userinfo?.jobtitle; 

		if ( param.version.toString() != '255') {
			resolveCompatibility( result ); 
		}
		return result; 
	} 

	private void resolveCompatibility( result ) {
		result.txnno = result.controlno; 
		result.dtposted = result.controldate;
		result.txndate = result.dtcreated;  

		if ( result.totalcr == null ) result.totalcr = 0.0;
		if ( result.totalcheck == null ) result.totalcheck = 0.0;
		
		result.totalnoncash = result.totalcheck + result.totalcr; 
		result.totalcash = result.amount - result.totalnoncash; 
	}
} 